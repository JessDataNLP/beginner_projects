import math

z_table = {
    -3.4: 0.0003,
    -3.3: 0.0005,
    -3.2: 0.0007,
    -3.1: 0.0010,
    -3.0: 0.0013,
    -2.9: 0.0019,
    -2.8: 0.0026,
    -2.7: 0.0035,
    -2.6: 0.0047,
    -2.5: 0.0062,
    -2.4: 0.0082,
    -2.3: 0.0107,
    -2.2: 0.0139,
    -2.1: 0.0179,
    -2.0: 0.0228,
    -1.9: 0.0287,
    -1.8: 0.0359,
    -1.7: 0.0446,
    -1.6: 0.0548,
    -1.5: 0.0668,
    -1.4: 0.0808,
    -1.3: 0.0968,
    -1.2: 0.1151,
    -1.1: 0.1357,
    -1.0: 0.1587,
    -0.9: 0.1841,
    -0.8: 0.2119,
    -0.7: 0.2420,
    -0.6: 0.2743,
    -0.5: 0.3085,
    -0.4: 0.3446,
    -0.3: 0.3821,
    -0.2: 0.4207,
    -0.1: 0.4602,
    0.0: 0.5000,
    0.1: 0.5398,
    0.2: 0.5793,
    0.3: 0.6179,
    0.4: 0.6554,
    0.5: 0.6915,
    0.6: 0.7257,
    0.7: 0.7580,
    0.8: 0.7881,
    0.9: 0.8159,
    1.0: 0.8413,
    1.1: 0.8643,
    1.2: 0.8849,
    1.3: 0.9032,
    1.4: 0.9192,
    1.5: 0.9332,
    1.6: 0.9452,
    1.7: 0.9554,
    1.8: 0.9641,
    1.9: 0.9713,
    2.0: 0.9773,
    2.1: 0.9821,
    2.2: 0.9861,
    2.3: 0.9893,
    2.4: 0.9918,
    2.5: 0.9938,
    2.6: 0.9953,
    2.7: 0.9965,
    2.8: 0.9974,
    2.9: 0.9981,
    3.0: 0.9987,
    3.1: 0.9990,
    3.2: 0.9993,
    3.3: 0.9995,
    3.4: 0.9997,
}


def median(numbers: list) -> float:
    number_elements = len(numbers)

    # Sort the list of numbers
    numbers.sort()

    # Check if there are an even or odd number of elements in the list
    if number_elements % 2 == 0:
        # If there are an even number of elements, calculate the average of the two middle numbers
        median_value = (
            numbers[number_elements // 2 - 1] + numbers[number_elements // 2]
        ) / 2
        return median_value
    else:
        # If there are an odd number of elements, return the middle number
        median_value = numbers[number_elements // 2]
        return median_value


def first_entry(numbers: list) -> int:
    numbers.sort()
    return numbers[0]


def last_entry(numbers: list) -> int:
    numbers.sort()
    return numbers[-1]


def standard_deviation(numbers: list):

    mean_value = mean(numbers)  # define the mean

    sum_square_differences = 0
    for number in numbers:
        sum_square_differences += (
            number - mean_value
        ) ** 2  # sum of the data points minus the mean squared

    variance = sum_square_differences / len(
        numbers
    )  # divide for the number of datapoints

    return math.sqrt(variance)  # return the result radice quadrataa


def standard_error(numbers, population_mean, population_stdeviation):
    st_er = (mean(numbers) - population_mean) / (
        population_stdeviation / math.sqrt(len(numbers))
    )
    return st_er


def z_score(number, numbers: list):
    z_score_formula = number - mean(numbers) / standard_deviation(numbers)
    z_score_rounded = round(
        z_score_formula, 1
    )  # this is wrong, it needs two, but it is just to learn how to do this
    z_value = z_table[z_score_rounded]
    print(
        f" z score: {z_score_formula}\nz score rounded: {z_score_rounded}\nz value {z_value}"
    )


def data_characteristics(numbers):
    first_entry_value = first_entry(numbers)
    median_value = median(numbers)
    mean_value = mean(numbers)
    last_entry_value = last_entry(numbers)
    standard_deviation_value = standard_deviation(numbers)

    print(
        f"Smallest Entry: {first_entry_value}\nBiggest Entry: {last_entry_value}\nMedian: {median_value}\nMean: {mean_value} \nStandard Deviation: {standard_deviation_value}"
    )


number_list = [2, 4, 8, 8, 100]
print(
    median(number_list)
)  # if return is used, you must specify the print function to see the result on the terminal
print(last_entry(number_list))
print(first_entry(number_list))
print(mean(number_list))

data_characteristics(number_list)

z_score(2, number_list)

print(standard_error(number_list, 5, 5.5))
